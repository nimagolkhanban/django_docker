services:
# the first service that we defiened
  rabbitmq:
    # chose a name for the contaner like we do in the docker with --name if you dont make this it will named it after the services that we named
    container_name: rabbitmq
    # wich image you want to use we dont need to pull this like we do in the docker
    image: rabbitmq:latest
    # the code bellow do not create a network just spesified that we should connect to wich network
    networks:
      - main
    # connect the 5672 port of my computer to the 5672 port that is belong to rabbitmq
    ports:
      - "5672:5672"
    restart: always
  postgres:
    container_name: postgres
    image: postgres:latest
    # postgres required some environment variable and we should defiened in the docker compose
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - main
    ports:
      - "5432:5432"
    restart: always
    # postgres required a volume to save all the important info
    # create a volume name postgres_data and connect it to 
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  celery_worker:
    container_name: celery_worker
    # celery do not need any variable we should only defien a command
    command: "celery -A A worker -l INFO"
    # this container depend on this 3 container so if any of this 3 do not run properly do not run this
    depends_on:
      - app
      - rabbitmq
      - postgres
    
    build: .
    environment:
      - C_FORCE_ROOT="true"
    networks:
      - main

    restart: always

  app:
    # our dockerfile is in the root so we give the . to the path of buld value
    build: .
    # sh -c is for tell that this line have two seprate command and we seprate them eith &&
    command: sh -c "python manage.py migrate && gunicorn.wsgi -b 0.0.0.0:8000"
    container_name: app
    volumes:
      # connect the local code environment to the volume in the code 
      - .:/code/
    depends_on:
      - postgres
      - rabbitmq
      # the diffrence between expose and ports is that 
      # in the expose outside the docker nobody outside the docker cant connect to db only conrainer in the docker can connect
      # but in the port even outside the docker programs can connect to the db
    expose:
      - "8000"
    networks:
      - main
    restart: always
  
  nginx:
    container_name: nginx
    command: nginx -g "daemon off;"
    depends_on:
      - app
    image: nginx:latest
    networks:
      - main
    ports:
      - "80:80"
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    
    

networks:
  main:

volumes:
  postgres_data:
